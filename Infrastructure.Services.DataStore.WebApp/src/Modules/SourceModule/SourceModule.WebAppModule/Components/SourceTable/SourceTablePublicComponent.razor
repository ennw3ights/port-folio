 @inject ISourceHttpClient SourceHttpClient

 <div class="d-flex flex-row w-75 mb-4 m-auto">
     <SourceTablePublicComponent_Search OnSearch="@(_table.OnSearch)" />
     <MudSpacer />
     <MudButton Href="/create-source"
                Variant="Variant.Outlined"
                Class="mud-border-secondary mud-theme-primary">
         Create a source
     </MudButton>
 </div>
 
 <SourceTable 
     Class="w-75 m-auto"
     SortLabel="Sort By"
     Bordered="true"
     @ref="_table"
     RowClass="border-x-2 mud-border-secondary"
     CustomHeader="true"
     HeaderClass="border-2 mud-border-secondary mud-theme-primary"
     ServerData="@(new Func<TableState, Task<TableData<SourceTableComponentModel.SourceItem>>>(ServerReload))">

    <HeaderContent>
        <MudTh Class="border-r-2 mud-border-secondary text-center">Source name</MudTh>
        <MudTh Class="border-r-2 mud-border-secondary text-center">
            Type of source
            <MudSelect 
                MultiSelection="true"
                SelectedValuesChanged="@(_table.OnTypeChanged)"
                T="string"
                Dense="true"  
                DisableUnderLine="true">
                @foreach (var type in SourceType.List)
                {
                    <MudSelectItem T="string" Value="@type.Name">
                        @type.Name
                    </MudSelectItem>
                }
            </MudSelect>
        </MudTh>
        <MudTh Class="border-r-2 mud-border-secondary text-center">
            <MudTableSortLabel 
                SortBy="new Func<SourceTableComponentModel.SourceItem, object>(x=>x.DateTimeCreate)"
                SortLabel="DateTimeCreate"
                T="SourceTableComponentModel.SourceItem">
                Creation date
            </MudTableSortLabel>
        </MudTh>
        <MudTh Class="border-r-2 mud-border-secondary text-center">
            <MudTableSortLabel 
                SortBy="new Func<SourceTableComponentModel.SourceItem, object>(x=>x.DateTimeModified)"
                SortLabel="DateTimeModified" 
                T="SourceTableComponentModel.SourceItem">
                Modification date
            </MudTableSortLabel>
        </MudTh>
        <MudTh Class="border-r-2 mud-border-secondary text-center">Actions with source</MudTh>
    </HeaderContent>
    
    <RowTemplate>
        <MudTd Class="border-r-2 mud-border-secondary text-center" DataLabel="Source name">
            @context.Name
        </MudTd>
        <MudTd Class="border-r-2 mud-border-secondary text-center" DataLabel="Type of source">
            @context.Type
        </MudTd>
        <MudTd Class="border-r-2 mud-border-secondary text-center" DataLabel="Creation date">
            @context.DateTimeCreate.ToString("dd.MM.yy")
        </MudTd>
        <MudTd Class="border-r-2 mud-border-secondary text-center" DataLabel="Modification date">
            @context.DateTimeModified.ToString("dd.MM.yy")
        </MudTd>
        <MudTd Class="border-r-2 mud-border-secondary text-center" DataLabel="Actions with source">
            <MudLink Color="Color.Default" Href="">Open</MudLink>
        </MudTd>
    </RowTemplate>
    
    <NoRecordsContent>
        <MudText>No matching items found</MudText>
    </NoRecordsContent>
    
    
    <PagerContent>
        <div class="border-x-2 border-b-2 mud-border-secondary mud-theme-primary">
        <MudTablePager
            PageSizeOptions="new int[] { 10, 25, 50, int.MaxValue }"/>
        </div>
    </PagerContent>
</SourceTable>


@code {
    SourceTable<SourceTableComponentModel.SourceItem> _table = new();

    IEnumerable<string> Options { get; set; } = new HashSet<string>();

    async Task<TableData<SourceTableComponentModel.SourceItem>> ServerReload(TableState state)
    {
        _table.UpdateQueryParameters(state);

        _table.QueryParameters.SourceTypeNames = Options;

        var response = await SourceHttpClient.GetAsync(_table.QueryParameters);

        var tableData = Mapper.MapToTableData(response);

        _table.UpdateData(tableData);

        await InvokeAsync(StateHasChanged);

        return new TableData<SourceTableComponentModel.SourceItem>
        {
            TotalItems = tableData.TotalCount,
            Items = tableData.Data,
        };
    }
}
