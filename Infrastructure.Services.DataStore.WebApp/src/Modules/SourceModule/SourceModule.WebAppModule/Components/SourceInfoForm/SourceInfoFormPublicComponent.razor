@inject ISnackbar Snackbar
@inject ISourceValidator SourceValidator
@inject ISourceHttpClient SourceHttpClient
@inject NavigationManager NavigationManager

<MudText Class="ml-4" Typo="Typo.h1">Source "@SourceTitle"</MudText>

<MudForm @ref="_form" 
         @bind-IsValid="@Success"
         Class="w-50">
    <MudList>
        <MudListItem>
        <div class="d-flex flex-row">
            <MudText Class="w-25">Id:</MudText> @_sourceInfoFormComponentModel.Id
        </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Title:</MudText>
                
                @if (!EditMode)
                {
                    <MudText Typo="Typo.body2">@_sourceInfoFormComponentModel.Name</MudText>
                }
                else
                {
                    <MudTextField T="string" 
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Disabled="@(!EditMode)"
                                  @bind-Value="@_sourceInfoFormComponentModel.Name"
                                  Validation="@(new Func<string, IEnumerable<string>>(SourceValidator.ValidateName))"/>
                }
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Type:</MudText> 
                @_sourceInfoFormComponentModel.Type.Name
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Date of creation:</MudText>
                @_sourceInfoFormComponentModel.DateTimeCreated.ToString("dd.MM.yy")
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Modification date:</MudText>
                @_sourceInfoFormComponentModel.DateTimeModified.ToString("dd.MM.yy")
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <MudText Typo="Typo.body1" Class="mb-2">Template:</MudText>
            @foreach (var property in _sourceInfoFormComponentModel.Template.Properties)
            {
                <div class="d-flex flex-row w-100">
                    <MudPaper Class="pa-3 mb-2 w-50 border-2 mud-border-secondary"
                              Elevation="0">
                        @property.Name
                    </MudPaper>
                    
                    @if(property.IsValidByDefault)
                    {
                        <MudCheckBox ReadOnly="true"
                                     @bind-Value="@Check"
                                     Class="mt-1"
                                     Size="Size.Small"
                                     Color="Color.Secondary">
                            Valid by default
                        </MudCheckBox>
                    }
                </div>
            }
        </MudListItem>
    </MudList>

    @if (!EditMode)
    {
        <SourceInfoFormPublicComponent_DeleteButton SourceId="@_sourceInfoFormComponentModel.Id"
                                                    OnRemove="@OnDeleteButtonClick"/>
        
        <MudButton OnClick="@OnEditButtonClick"
                   Class="mx-2 mud-border-secondary"
                   Variant="Variant.Outlined"
                   Size="Size.Large">
            Edit
        </MudButton>
        
        <MudButton Href="/import"
                   Class="mud-border-secondary"
                   Variant="Variant.Outlined"
                   Size="Size.Large">
            Import
        </MudButton>
    }
    else
    {
        <MudButton OnClick="@OnSaveButtonClick">Save</MudButton>
    }
</MudForm>

@code {
    SourceInfoFormComponentModel _sourceInfoFormComponentModel = new();

    MudForm _form = null!;

    bool Check { get; set; } = true;

    bool Success { get; set; }

    string SourceTitle { get; set; } = null!;

    bool EditMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var data = await SourceHttpClient.GetByIdAsync(Guid.NewGuid().ToString());

        _sourceInfoFormComponentModel = Mapper.MapToModel(data);

        SourceTitle = _sourceInfoFormComponentModel.Name;
    }

    void OnDeleteButtonClick()
    {
        Snackbar.Add("Source removed", Severity.Success);

        NavigationManager.NavigateTo("/", true);
    }

    void OnEditButtonClick()
    {
        EditMode = !EditMode;
    }

    async Task OnSaveButtonClick()
    {
        await _form.Validate();
        if (Success)
        {
            var data = Mapper.MapToDto(_sourceInfoFormComponentModel);

            await SourceHttpClient.UpdateAsync(data);

            Snackbar.Add("Source saved", Severity.Success);

            SourceTitle = _sourceInfoFormComponentModel.Name;

            EditMode = !EditMode;
        }
    }
}