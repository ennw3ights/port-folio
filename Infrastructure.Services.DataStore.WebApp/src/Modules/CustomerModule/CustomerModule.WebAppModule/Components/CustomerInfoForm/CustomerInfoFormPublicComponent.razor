@inject ICustomerHttpClient CustomerHttpClient
@inject ICustomerValidator CustomerValidator
@inject ISnackbar Snackbar

@inject NavigationManager NavigationManager
@inject LoggingService LoggingService

<MudText Class="ml-4" Typo="Typo.h1">Customer "@CustomerTitle"</MudText>

<MudForm @ref="_form" 
         @bind-IsValid="Success"
         Class="w-75">
    <MudList>
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25">Id:</MudText> @_customerInfoFormComponentModel.Id
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Title:</MudText>
                @if (!EditMode)
                {
                    <MudText Typo="Typo.body2">@_customerInfoFormComponentModel.Name</MudText>
                }
                else
                {
                    <MudTextField T="string"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  @bind-Value="@_customerInfoFormComponentModel.Name"
                                  Validation="@(new Func<string, IEnumerable<string>>(CustomerValidator.ValidateName))"/>
                }
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Date of creation:</MudText>
                @_customerInfoFormComponentModel.DateTimeCreate.ToString("dd.MM.yy")
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>

        <MudListItem>
            <div class="d-flex flex-row">
                <MudText Class="w-25 my-auto">Modification date:</MudText>
                @_customerInfoFormComponentModel.DateTimeLastModified.ToString("dd.MM.yy")
            </div>
        </MudListItem>
        <MudDivider DividerType="DividerType.Middle"/>
        
        <MudListItem>
            <div class="d-flex flex-row w-100">
                <MudText Class="w-25 mt-2">Default template:</MudText>
                <div class="d-flex flex-column w-100">
                    @foreach (var property in _customerInfoFormComponentModel.DefaultTemplate.Properties)
                    {
                        <div class="d-flex flex-row w-100">
                            <MudPaper Class="pa-2 w-25 mb-2 ml-12 border-2 mud-border-secondary">
                                @property.Name
                            </MudPaper>

                            @if (property.IsRequired)
                            {
                                <MudCheckBox ReadOnly="true"
                                             Size="Size.Small"
                                             Color="Color.Secondary"
                                             @bind-Value="@Check">
                                    <MudText Typo="Typo.body2">Required</MudText>
                                </MudCheckBox>
                            }

                            @if (property.IsUnique)
                            {
                                <MudCheckBox ReadOnly="true"
                                             Size="Size.Small"
                                             Color="Color.Secondary"
                                             @bind-Value="@Check">
                                    <MudText Typo="Typo.body2">Unique to the customer</MudText>
                                </MudCheckBox>
                            }

                            @if (property.IsValidByDefault)
                            {
                                <MudCheckBox ReadOnly="true"
                                             Size="Size.Small"
                                             Color="Color.Secondary"
                                             @bind-Value="@Check">
                                    <MudText Typo="Typo.body2">Valid only</MudText>
                                </MudCheckBox>
                            }
                        </div>
                    }
                </div>
            </div>
        </MudListItem>

        @if (!EditMode)
        {
            <CustomerInfoFormPublicComponent_DeleteButton CustomerId="@_customerInfoFormComponentModel.Id"
                                                          OnRemove="@OnDeleteButtonClick"/>
            <MudButton OnClick="@OnEditButtonClick"
                       Class="mx-2 mud-border-secondary"
                       Variant="Variant.Outlined"
                       Size="Size.Large">
                Edit
            </MudButton>
            
            <MudButton Href="/import"
                       Class="mx-2 mud-border-secondary"
                       Variant="Variant.Outlined"
                       Size="Size.Large">
                Import
            </MudButton>
        }
        else
        {
            <MudButton OnClick="@OnSaveButtonClick"
                       Class="mx-2 mud-border-secondary"
                       Variant="Variant.Outlined"
                       Size="Size.Large">
                Save
            </MudButton>
        }
    </MudList>
</MudForm>

@code {
    MudForm _form = null!;

    CustomerInfoFormComponentModel _customerInfoFormComponentModel = new();

    bool Success { get; set; }

    bool Check { get; set; } = true;

    bool EditMode { get; set; }

    string CustomerTitle { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var customerDto = await CustomerHttpClient.GetCustomerAsync(Guid.NewGuid().ToString());

        _customerInfoFormComponentModel = Mapper.MapToModel(customerDto);

        CustomerTitle = _customerInfoFormComponentModel.Name;
    }

    void OnDeleteButtonClick()
    {
        LoggingService.LogSuccess("Customer deleted successfully");

        NavigationManager.NavigateTo("/", true);
    }

    void OnEditButtonClick()
    {
        EditMode = !EditMode;
    }

    async Task OnSaveButtonClick()
    {
        await _form.Validate();
        if (Success)
        {
            var data = Mapper.MapToDto(_customerInfoFormComponentModel);

            await CustomerHttpClient.UpdateAsync(data);

            LoggingService.LogSuccess("Customer saved successfully");

            CustomerTitle = _customerInfoFormComponentModel.Name;

            EditMode = !EditMode;
        }
        
    }

}